 @Autowired
    private MockMvc mvc;

    @Test
    public void getJewelries() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/jewelries")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());

    }

    @Test
    public void getJewelryById() throws Exception {
        mvc.perform(MockMvcRequestBuilders.get("/jewelries/1")
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk()); 

@Test
        public void getJewelries() throws Exception {
            mvc.perform(MockMvcRequestBuilders.get("/jewelries")
                    .accept(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$", Matchers.hasSize(2)))
                    .andExpect(jsonPath("$[0].name",
                            Matchers.equalTo("French Pave Diamond Engagement Ring in Platinum (1/4 ct. tw.)")));

        }

        @Test
        public void getJewelriesById() throws Exception {
            mvc.perform(MockMvcRequestBuilders.get("/jewelries/1")
                    .accept(MediaType.APPLICATION_JSON))
                    .andExpect(status().isOk())
                    .andExpect(jsonPath("$.name",
                            Matchers.equalTo("French Pave Diamond Engagement Ring in Platinum (1/4 ct. tw.)")));

        }

    @ParameterizedTest // Создаем параметризованный тест
    @ValueSource(ints = {-1, 0, 1, 2, Integer.MAX_VALUE})
    public void getJewelriesById(int id) throws Exception {
        ResultActions actions = mvc.perform(MockMvcRequestBuilders.get("/jewelries/{id}",id).
                accept(MediaType.APPLICATION_JSON));
        actions
                .andExpect(status().isOk());
        switch (id){
            case 1:
                actions
                        .andExpect(jsonPath("$.name",
                                Matchers.equalTo("French Pave Diamond Engagement Ring in Platinum (1/4 ct. tw.)")));
                break;
            case 2:
                actions
                        .andExpect(jsonPath("$.name",
                                Matchers.equalTo("Petite Solitaire Engagement Ring in Platinum")));
                break;
            default:
                actions
                        .andExpect(content().string("null"));
        }
    } 




@Test
    public void postJewelry() throws Exception {
        mvc.perform(
MockMvcRequestBuilders.post
("/jewelries")
                .content(asJsonString(new Jewelry( 3L, "name", "color", 1., 2., new Material(1L,"m"))))
                .contentType(MediaType.APPLICATION_JSON)
                .accept(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                ;
    }

    public static String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    } 
    
    https://github.com/KirillovItstep/QAClassWork/blob/main/%D0%9B%D0%B5%D0%BA%D1%86%D0%B8%D1%8F%207%D0%B0%20%D0%92%D0%B8%D0%B4%D1%8B%20%D1%82%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B9%20%D0%BA%20%D0%9F%D0%9E.pdf
